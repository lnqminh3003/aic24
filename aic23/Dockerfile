# Uses multi-stage builds requiring Docker 17.05 or higher
# Creating a python base with shared environment variables
FROM python:3.10-slim-bullseye AS python-base
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# builder-base is used to build dependencies
FROM python-base AS builder-base
RUN buildDeps="build-essential" \
    && apt-get update \
    && apt-get install --no-install-recommends -y \
        curl \
        vim \
        netcat \
    && apt-get install -y --no-install-recommends $buildDeps \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry - respects $POETRY_VERSION & $POETRY_HOME
ENV POETRY_VERSION=1.5.0
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=${POETRY_HOME} python3 - --version ${POETRY_VERSION} && \
    chmod a+x /opt/poetry/bin/poetry

# Copy pyproject.toml and poetry.lock to cache them
WORKDIR $PYSETUP_PATH
COPY pyproject.toml poetry.lock ./

# Install runtime dependencies
RUN poetry install --no-root --only main

# Development stage installs all dependencies
FROM python-base as development
ENV FASTAPI_ENV=development

# Copy Poetry and virtual environment
COPY --from=builder-base $POETRY_HOME $POETRY_HOME
COPY --from=builder-base $PYSETUP_PATH $PYSETUP_PATH

# Copy the entrypoint script
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Install all dependencies (including dev)
WORKDIR $PYSETUP_PATH
RUN poetry install --no-root

# Copy the application code
WORKDIR /app
COPY . .

EXPOSE 8000
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["uvicorn", "main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]

# Linting stage
FROM development AS lint
WORKDIR /app
RUN black --config ./pyproject.toml --check app tests
RUN isort --settings-path ./pyproject.toml --recursive --check-only
CMD ["tail", "-f", "/dev/null"]

# Test stage
FROM development AS test
WORKDIR /app
RUN coverage run --rcfile ./pyproject.toml -m pytest tests
RUN coverage report --fail-under 95

# Production stage
FROM python-base AS production
ENV FASTAPI_ENV=production

# Copy only necessary files and dependencies from the builder stage
COPY --from=builder-base $VENV_PATH $VENV_PATH
COPY gunicorn_conf.py /gunicorn_conf.py

# Copy entrypoint script
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Create a user for security purposes
RUN groupadd -g 1500 poetry && \
    useradd -m -u 1500 -g poetry poetry

# Copy application code and set permissions
COPY --chown=poetry:poetry ./app /app
COPY ./models/clip_vit_h14_nitzche.pkl /clip_vit_h14_nitzche.pkl

USER poetry
WORKDIR /app

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["gunicorn", "--worker-class", "uvicorn.workers.UvicornWorker", "--config", "/gunicorn_conf.py", "main:app"]
